import (
	"fmt"
	"net/http"

	wrapErr "github.com/Chekunin/wraperr"
	"github.com/gin-gonic/gin"
)

{{ $rest := (or .Vars.DecoratorName (printf "%sRest" .Interface.Name)) }}
{{ $enableDoc := (not .Vars.NoDocs) }}
type {{$rest}} struct {
  Usecase {{.Interface.Type}}
}

func New{{$rest}}(router *gin.RouterGroup, usecase {{.Interface.Type}}) *{{$rest}} {
	result := &{{$rest}}{Usecase: usecase}
	result.routes(router)
	return result
}

{{ $vars := .Vars }}
const (
{{range $method := .Interface.Methods}}{{ $url := (or $method.Operation.Path (index $vars (printf "Url%s" $method.Name)) (printf "/%s" (down $method.Name))) }}  Url{{$method.Name}} = "{{$url}}"
{{end}}
)

func (r *{{$rest}}) routes(router *gin.RouterGroup) {
{{range $method := .Interface.Methods}}  router.{{$method.Operation.HTTPMethod}}(Url{{$method.Name}}, r.handler{{$method.Name}})
{{end}}
}

{{range $method := .Interface.Methods}}
{{ $hasPager := false }}{{ $hasLimit := false}}{{ $hasOffset := false }}
{{if (not $method.NoParamsRequest)}}
    {{if $method.HasParams}} type Request{{$method.Name}} struct {

    {{range $p := $method.Params}}

        {{- if (eq $p.Name "limit")}}{{ $hasLimit = true }}{{end -}}
        {{- if (eq $p.Name "offset")}}{{ $hasOffset = true }}{{end -}}

        {{- if (eq $p.Name "ctx") }}
        {{- else -}}
            {{- $pName := $p.Name -}}
            {{- if (and $method.Gorg.Pager.Exists (eq $method.Gorg.Pager.OffsetName $p.Name)) -}}
                {{- if (not $method.Gorg.Pager.UseOffset) -}}
                    {{- $pName = "page" -}}
                {{- end -}}
            {{- end -}}
            {{- $pType := $p.Type -}}
            {{- if $p.Variadic -}}
                {{- $pType = (replace $pType "..." "[]") -}}
            {{- end -}}
            {{(upFirst $pName)}} {{$pType}}  `json:"{{(snake $pName)}}" form:"{{(snake $pName)}}" {{- $pg := (index $method.Gorg.Params $pName) }}{{if (ne $pg.Tags "")}} {{ $pg.Tags }}{{end}}` {{if (ne $pg.Comment "")}} // {{ $pg.Comment }}
                        {{- else if (and $method.Gorg.Pager.Exists (eq $method.Gorg.Pager.LimitName $p.Name)) -}} // Limit is a size of one Page
                        {{- else if (and $method.Gorg.Pager.Exists (eq $method.Gorg.Pager.OffsetName $p.Name)) -}}{{- if (not $method.Gorg.Pager.UseOffset) -}} // Page starts from 1, then 2, 3 ...{{- end}}
                        {{- end}}
        {{end -}}
        {{end -}}

    }

    {{end}}
{{end}}
{{if $enableDoc}} {{range $d := $method.Doc}}
{{$d}} {{end}}
// @Summary {{range $i,$d := $method.Doc}}{{if (eq $i 0)}}{{$d}} {{end}}{{end}}
// @description {{range $d := $method.Comment}}{{$d}}{{end}}
// @Accept json
// @Produce json {{if (and $method.HasParams (not $method.NoParamsRequest))}}
// @Param req {{if (eq $method.Operation.HTTPMethod "GET")}}query{{else}}body{{end}} Request{{$method.Name}} false "req"{{end}}
// @Success 200{{range $i, $r := $method.Results}}{{if (eq $i 0)}}{{ if (HasPrefix  $r.Type "[]") }} {array} {{else}} {object} {{end}}{{$r.Type}}{{end}}{{end}} {{end}} {{- if (and $hasLimit $hasOffset)}}{{ $hasPager = true }} {{end}}
func (r *{{$rest}}) handler{{$method.Name}}(c *gin.Context) {
    var err error
    var res {{range $i, $r := $method.Results}}{{if (eq $i 0)}}{{$r.Type}}{{end}}{{end}}
{{if  $method.NoParamsRequest}}
       res, err = r.Usecase.{{$method.Name}}( {{if $method.AcceptsContext}}c.Request.Context(){{end}} )
{{else}}
        {{- if $method.HasParams}}    var req Request{{$method.Name}}
            {{if $method.NoParamsRequired}} if c.Request.ContentLength > 0 { {{end}}
            {{- if (eq $method.Operation.HTTPMethod "GET") -}}
                if err = c.ShouldBindQuery(&req); err != nil {
                            err = wrapErr.NewWrapErr(fmt.Errorf("binding data from query {{$method.Name}}"), err)
                            c.AbortWithError(http.StatusBadRequest, err)
                            return
                }
            {{else}}
                if err = c.ShouldBindJSON(&req); err != nil {
                            err = wrapErr.NewWrapErr(fmt.Errorf("binding data from query {{$method.Name}}"), err)
                            c.AbortWithError(http.StatusBadRequest, err)
                            return
                }
            {{- end -}}
            {{if $method.NoParamsRequired}} } {{end}}
            {{if $method.Gorg.Pager.Exists }}
            pager := urlstruct.Pager{Limit: req.{{(upFirst $method.Gorg.Pager.LimitName)}}, MaxLimit: {{ $method.Gorg.Pager.MaxLimit }} }
            {{- if $method.Gorg.Pager.UseOffset }}
                pager.Offset = req.{{(upFirst $method.Gorg.Pager.OffsetName)}}
            {{- else }}
                pager.SetPage(req.Page)
            {{ end -}}
            {{else if $hasPager}}
            pager := urlstruct.Pager{Limit: req.Limit, Offset: req.Offset, MaxLimit: 1000}
            {{end}}

            res, err = r.Usecase.{{$method.Name}}(
            {{- range $p := $method.Params}}
                 {{- $sufix:="" -}}
                 {{- if $p.Variadic -}}
                    {{- $sufix = "..." -}}
                 {{- end -}}
                 {{- if (eq $p.Name "ctx")}}
                    c.Request.Context(),
                 {{- else if (or (and $method.Gorg.Pager.Exists (eq $method.Gorg.Pager.LimitName $p.Name)) (and $hasPager (eq $p.Name "limit")))}}
                    pager.GetLimit(),
                 {{- else if (or (and $method.Gorg.Pager.Exists (eq $method.Gorg.Pager.OffsetName $p.Name)) (and $hasPager (eq $p.Name "offset")))}}
                    pager.GetOffset(),
                 {{- else}}
                    req.{{(upFirst $p.Name)}}{{$sufix}},
                 {{- end -}}
            {{end}}
            )
        {{else}}
            res, err = r.Usecase.{{$method.Call}}
        {{end -}}
{{end -}}
	if err != nil {
		c.AbortWithError(http.StatusInternalServerError, err)
		return
	}

{{if $method.Gorg.Vars.HasRowsCount}}
    {{if $method.Gorg.Vars.ZeroRows}}
	if len(res.Rows) == 0 {
		res.Rows = {{$method.Gorg.Vars.ZeroRows}}
	}
    {{end}}
	pageCount := int(math.Ceil(float64(res.Count) / float64(pager.GetLimit())))
	c.Header("X-Total-Count", strconv.Itoa(res.Count))
	c.Header("X-Page-Count", strconv.Itoa(pageCount))
	c.Header("X-Current-Page", strconv.Itoa(pager.GetPage()))
	c.Header("X-Per-Page", strconv.Itoa(pager.GetLimit()))
	c.Header("Access-Control-Expose-Headers", "X-Total-Count,X-Page-Count,X-Current-Page,X-Per-Page")

	c.JSON(http.StatusOK, res.Rows)
{{else}}
    {{range $i,$r := $method.Results -}}
        {{ if (eq $i 0)}}
        {{ if (HasPrefix  $r.Type "[]") }}
        if len(res) == 0 {
            res = {{$r.Type}}{}
        }
        {{end -}}
        {{end}}
    {{- end -}}
	c.JSON(http.StatusOK, res)
{{end}}
}
{{end}}